---
app_name:           borderhound
deploy_user:        deployer
deploy_group:       "{{ deploy_user }}"
deploy_user_path:   "/home/{{ deploy_user }}"
copy_local_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
timezone: EDT
timezone_location: America/Toronto

# App Git repo
app_git_repo:       "git@github.com:minimul/borderhound.git"
app_git_branch:     "master"

# Rails app
app_root_path:      "{{ deploy_user_path }}/{{ app_name }}"
app_current_path:   "{{ app_root_path }}/current"
app_releases_path:  "{{ app_root_path }}/releases"
app_shared_path:    "{{ app_root_path }}/shared"
app_pids_path:      "{{ app_shared_path }}/tmp/pids"
app_logs_path:      "{{ app_shared_path }}/log"
app_sockets_path:   "{{ app_shared_path }}/sockets"
rails_production_encryption_key: "{{ vault_rails_production_encryption_key }}"
rails_db_pool:      20
rails_environment:  production

# Puma
puma_service_file:  "puma.service.j2"
puma_config_file:   "{{ app_current_path }}/config/puma.rb"
puma_socket:        "{{ app_sockets_path }}/puma.sock"
puma_web_concurrency: 2

# SSHD
ssh_port: 22
ssh_password_authentication: "no"
ssh_permit_root_login: "yes"
ssh_usedns: "no"
ssh_permit_empty_password: "no"
ssh_challenge_response_auth: "no"
ssh_gss_api_authentication: "no"
ssh_x11_forwarding: "no"

# Goodjob
good_job_service_file:  "good_job.service.j2"

# Ansistrano
ansistrano_deploy_to: "{{ app_root_path }}"
ansistrano_keep_releases: 3
ansistrano_deploy_via: git
ansistrano_git_repo: "{{ app_git_repo }}"
ansistrano_git_branch: "{{ app_git_branch }}"
ansistrano_before_symlink_tasks_file: "{{ playbook_dir }}/deploy_tasks/prepare.yml"
ansistrano_after_symlink_tasks_file: "{{ playbook_dir }}/deploy_tasks/restart.yml"
ansistrano_git_identity_key_path: "~/.ssh/id_rsa"
ansistrano_ensure_shared_paths_exist: yes
ansistrano_ensure_basedirs_shared_files_exist: yes
ansistrano_allow_anonymous_stats: false

ansistrano_shared_paths:
  - log           # log -> ../../shared/log
  - tmp           # tmp -> ../../shared/tmp
  - vendor        # vendor -> ../../shared/vendor
  - public/assets # For Rails asset pipeline
  - node_modules  # For node_modules -> ../../shared/node_modules

shared_files_to_copy:
  - { src: database.yml.j2, dest: config/database.yml }
  - { src: production.key.j2, dest: config/credentials/production.key }

# Common
required_packages:
  - zlib1g-dev 
  - build-essential 
  - libssl-dev 
  - libreadline-dev 
  - libyaml-dev 
  - libxml2-dev 
  - libxslt1-dev 
  - libcurl4-openssl-dev
  - libffi-dev 
  - dirmngr 
  - gnupg
  - autoconf
  - bison
  - libreadline6-dev
  - libncurses5-dev
  - libgdbm6
  - libgdbm-dev
  - acl
  - libpq-dev # postgresql client
  - libjemalloc-dev # jemalloc
  - certbot
  - python3-certbot-nginx
  # begin puppeteer
  - ca-certificates
  - fonts-liberation
  - libappindicator3-1
  - libasound2
  - libatk-bridge2.0-0
  - libatk1.0-0
  - libc6
  - libcairo2
  - libcups2
  - libdbus-1-3
  - libexpat1
  - libfontconfig1
  - libgbm1
  - libgcc1
  - libglib2.0-0
  - libgtk-3-0
  - libnspr4
  - libnss3
  - libpango-1.0-0
  - libpangocairo-1.0-0
  - libstdc++6
  - libx11-6
  - libx11-xcb1
  - libxcb1
  - libxcomposite1
  - libxcursor1
  - libxdamage1
  - libxext6
  - libxfixes3
  - libxi6
  - libxrandr2
  - libxrender1
  - libxss1
  - libxtst6
  - lsb-release
  - wget
  - xdg-utils
  - awscli
  - xz-utils
  # puppeteer

# Ruby
ruby_version: 3.0.2
rbenv_ruby_configure_opts: "RUBY_CONFIGURE_OPTS=--with-jemalloc"
rbenv_root_path: "{{ deploy_user_path }}/.rbenv"
rbenv_shell_rc_path: "{{ deploy_user_path }}/.bashrc"
rubies_path: "{{ rbenv_root_path }}/versions"
ruby_path: "{{ rubies_path }}/{{ ruby_version }}"
rbenv_bin: "{{ rbenv_root_path }}/bin/rbenv"
rbenv_bundle: "{{ rbenv_root_path }}/shims/bundle"
additional_rubies: []

# Nodejs
nodejs_versions:
  - "lts/gallium"
  - "lts/hydrogen"

# Postgresql
postgresql_version: "12"
postgresql_db_user: "{{ deploy_user }}_postgresql_user"
postgresql_db_password: "{{ vault_postgresql_db_password }}" # from vault
postgresql_db_name: "{{ app_name }}_production"
postgresql_listen:
  - "localhost"
  - "{{ ansible_default_ipv4.address }}" # only if db is on a separate server
postgresql_packages:
  - "postgresql-{{ postgresql_version }}"
  - "postgresql-contrib-{{ postgresql_version }}"
postgresql_python_packages:
  - "python3-psycopg2"
postgresql_apt_url: "https://apt.postgresql.org/pub/repos/apt"
postgresql_apt_key: "{{ postgresql_apt_url }}/ACCC4CF8.asc"
postgresql_apt_repo: "deb {{ postgresql_apt_url }}/ {{ ansible_lsb.codename }}-pgdg main"
postgresql_config_path: /etc/postgresql/{{ postgresql_version }}/main
postgresql_data_path: /var/lib/postgresql/{{ postgresql_version }}/main
postgresql_pid_file: /var/run/postgresql/{{ postgresql_version }}-main.pid
# default admin user
postgresql_admin_user: postgres
# table locale and character encoding
postgresql_locale: "en_US"
postgresql_encoding: "UTF-8"
# shell locale and character encoding
postgresql_shell_locale: "{{ postgresql_locale }}"
postgresql_shell_encoding: "{{ postgresql_encoding | replace('-', '') | lower }}"
pg_hba_template: "pg_hba.conf.j2"
postgresql_parameters_template: "postgresql.conf.j2"
# all the created users
postgresql_users:
- name: "{{ postgresql_db_user | default('') }}"
  password: "{{ postgresql_db_password | default('') }}" # only needed if user is given
  role_attr_flags: "{{ postgresql_users_role_attr_flags }}"
# all the created databases
postgresql_databases:
- name: "{{ postgresql_db_name }}"
  owner: "{{ postgresql_db_user | default('') }}" # empty mean 'postgres' user will own it
  # encoding: "{{ postgresql_encoding }}"
  # lc_collate: "{{ postgresql_locale }}.{{ postgresql_encoding }}"
  # lc_ctype: "{{ postgresql_locale }}.{{ postgresql_encoding }}"
  # template: template0
# default user attr_flags
postgresql_users_role_attr_flags:
- CREATEDB
- SUPERUSER
# variables to build postgresql.conf
# postgresql_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
postgresql_port: 5432
postgresql_max_connections: 100
postgresql_connections:
  ssl: false
postgresql_resources:
  shared_buffers: 128MB
postgresql_write_ahead_log: {}
postgresql_replication: {}
postgresql_query_tuning: {}
postgresql_logging:
  log_line_prefix: "'%t '"
  log_timezone: "'UTC'"
postgresql_runtime_statistics: {}
postgresql_autovacuum: {}
postgresql_client_connection_defaults:
  datestyle: "'iso, mdy'"
  timezone: "'UTC'"
  lc_messages: "'{{ postgresql_locale }}.{{ postgresql_encoding }}'"
  lc_monetary: "'{{ postgresql_locale }}.{{ postgresql_encoding }}'"
  lc_numeric: "'{{ postgresql_locale }}.{{ postgresql_encoding }}'"
  lc_time: "'{{ postgresql_locale }}.{{ postgresql_encoding }}'"
  default_text_search_config: "'pg_catalog.english'"
postgresql_lock_management: {}
postgresql_cutomized: {}
postgresql_service: postgresql
postgresql_socket_directories:
  - "/var/run/postgresql"
postgresql_extensions:
  - citext
  - pgcrypto

# nginx
nginx_https_enabled: true
nginx_conf_template: "nginx.conf.j2"

# certbot
cert_dir: /etc/letsencrypt/live
certbot_email: "admin@{{ inventory_hostname }}"
certbot_domains:
  - "{{ inventory_hostname }}"
  - "www.{{ inventory_hostname }}"
  - "staging.{{ inventory_hostname }}"
certbot_flags: ""

# PostgreSQL Backup to S3
aws_key: "{{ vault_aws_key }}"
aws_secret: "{{ vault_aws_secret }}"

postgresql_backup_dir: "{{ deploy_user_path }}/backups"
postgresql_backup_filename_format: >-
  {{ app_name }}-%Y%m%d-%H%M%S.pgdump
postgresql_s3_backup_bucket: "{{ app_name }}-db-backups" # Must be created manually
postgresql_s3_backup_hour: "3"
postgresql_s3_backup_minute: "0" # Daily at 3AM
postgresql_s3_backup_delete_after: "7 days" # days after which old backups should be deleted

# Swap disk
swapfile:
  path: /swapfile
  size_gb: 2
  swappiness: 3
  vfs_cache_pressure: 50

# fluentbit
fluentbit_flush_seconds: 2
fluentbit_inputs:
  - Name: tail
    Path: "{{ app_logs_path }}/production.log"

fluentbit_outputs:
  - Name: http
    Match: "*"
    tls: On
    Host: "" # e.g: loggly or sumologic logs endpoint
    Port: 443
    URI: ""  # e.g: /receiver/v1/http/{{ vault_sumologic_token }}
    Format: json_lines
    Json_Date_Key: timestamp
    Json_Date_Format: iso8601
    Retry_Limit: False

logrotate_conf:
  - path: "rails"
    conf: |
      {{ app_logs_path }}/*.log {
        daily
        size 20M
        missingok
        rotate 52
        compress
        delaycompress
        notifempty
        copytruncate
      }
