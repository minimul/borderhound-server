---
- name: Bundle install with --deploy
  bundler:
    state: present
    deployment_mode: yes
    gem_path: "../../shared/vendor/bundle" # relative to chdir
    chdir: "{{ ansistrano_release_path.stdout }}"
    exclude_groups: ["development", "test"]
    executable: "{{ rbenv_bundle }}"

# Must symlink database.yml and production.key before running migrations
- name: Symlink database.yml
  file:
    src: "{{ ansistrano_deploy_to }}/shared/config/database.yml"
    dest: "{{ ansistrano_release_path.stdout }}/config/database.yml"
    state: link

- name: Symlink production.key
  file:
    src: "{{ ansistrano_deploy_to }}/shared/config/credentials/production.key"
    dest: "{{ ansistrano_release_path.stdout }}/config/credentials/production.key"
    state: link

- name: Running pending migrations
  shell: "{{ rbenv_bundle }} exec rails db:migrate"
  become: true
  become_user: "{{ deploy_user }}"
  run_once: true
  args:
    chdir: "{{ ansistrano_release_path.stdout }}"

- name: Clean old assets. Needed to get all potential Tailwindcss changes
  shell: "{{ rbenv_bundle }} exec rails assets:clean"
  become: true
  become_user: "{{ deploy_user }}"
  args:
    chdir: "{{ ansistrano_release_path.stdout }}"

- name: Precompiling assets
  # -i runs in interactive mode so .bashrc is run; nvm use is needed to respect the .nvmrc
  shell: "bash -i -c 'nvm use;{{ rbenv_bundle }} exec rails assets:precompile'"
  become: true
  become_user: "{{ deploy_user }}"
  args:
    chdir: "{{ ansistrano_release_path.stdout }}"
